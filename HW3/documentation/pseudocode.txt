Ahmed Alabdullah 
Assignment #3
Pseudocode for the Source Code

TABLE OF CONTENTS

1. Project Tree
2. Workflow
3. Scripts Folder
4. RUNBGD.SH
5. Java Source Code Overview
6. AssignmentDriver.java
7. BatchGradientDescent.java Map-Reducer
8. IterationController.java Map-Reducer
9. BooleanCollapser.java Map-Reducer
10. MatrixMultiplier.java Map-Reducer

##1 PROJECT TREE:

src: 		contains Java source code.
scripts: 	contains bash scripts to facilitate copying files between 			computers, compile, and then run the program.
sample_output: 	a small sample of the final predication matrix produced by the program.
documentation: 	contains this file.

##2: WORKFLOW
                RunBGD.sh ------------------> AssignmentDriver -> BGDJob -> IterationJob -> CollapseBooleansJob
                     ^                                                                              |
                     |  not done yet                                                                |
                     |                                                                              |
                     |                                                                              |
                     |-------------------------------------------------------------------------------
                     |
                     | done BGD
                     |
                     |
            MatrixMultiplicationJob
##3: SCRIPTS

the scripts folder contains the following:
compile.sh : this compiles the source code, using maven.
git.sh : this downloads my source code from github.
get.sh : this gets the final output from hadoop into the local directory
runBGD.sh: this is the script which runs BGD iteratively.

runBGD.sh  is the first step into the program, so let's look at it next:

##4: RUNBGD.SH PSEUDOCODE

cleanup the input and output folders in hadoop FS 
copy the original and UV matrix input files into hadoop
BGD_DONE = false 
while BDG_done isn't true:
 run BGD job on U and V matrices with dimensions: [m,n,d] (m n and d are input parameters)
 the Jar file will run BGD, then compare new UV matrix against old, produce a list of booleans for every cell, a new job collapses those booleans into one boolean which becomes the new file of BGD_DONE
end while loop
if BDG_done is true: run matrix multiplication job (same jar, adding a final parameter "mul" to the matrix dimensions


##5: JAVA SOURCE CODE
under src/main/java:

customkeys :	custom map-reduce keys used by the program.

    MatrixVectorWritable: this is a single-array object representing a vector in a matrix, could be either a row or a column. Used in Matrix Multiplication.
    MatrixWritable: this has a two-dimesional array object representing a matrix. Used in BGD.
	
drivers: classes which orchestrate the hadoop jobs.	

    AssignmentDriver: the class with the main method. Responsible for running  various jobs in the jar file.
    JobFactory: Configures jobs as requested by Assignment Driver.(configuration including setting key and value classes,
    specifying input and output files amongst other tasks)

mapreducers: the mapreducers for every job in the program.
    BatchGradientDescent: the BGD mapreducer
    IterationController: the mapreducer which will compare new UV matrices cells against previous values
    BooleanCollasper: collapses boolean output of IterationController into a single bool value
    MatrixMultiplier: performs matrix multiplication


##6: ASSIGNMENTDRIVER.java

when the jar is called by hadoop, AssignmentDriver:

    checks length of argument, if 6 (input output m n d MULTIPLY)
    run multiplication job (that means the BGD has completed)

    else: run BGDJob
    get BGD job configuration from JobFactory
    once BGDJob is done
    run IterationJob (comparses every cell entry in new UV matrix against previous value)
    run CollapseJob (collapses output of iteration into a single boolean value)
    end

##7: Batch Gradient Descent.java Map-Reducer

    input : a UV_Matrix and the original matrix
    output: a new UV_Matrix optimized by gradient descent formula
    what it does: performs UV decomposition as outlined in the formula given in the book.

    Map Method:
        builds U,V and O (original dataset matrix) matrices in memory from the input files
        once mapping is completed (cleanup method):
            for every cell in U and V, provide the data it needs to calculate a new value.
            for a cell in U, example U[r,s], it provides:
                the entire V matrix
                column s from the U matrix
                column s from the O matrix
            for a cell in V, e.g. V[r,s] it provides:
                the entire U matrix
                row r from the U matrix
                row r from the O matrix

            those values will be available in the reduce method, reducer keys are cell values so every cell has its own reduce
            operation

    Reduce Job:

        for every cell in U and V:
            calculate new value
            emit cell, newvalue as output

        the calculate method follows the formulas provided in Section 9.4.4 Optimizing an Arbitrary Element



##8: IterationController Map-Reducer

    input: new UV_matrix, old UV_matrix
    output: for every cell in U and V, a boolean which shows if the difference is over step value threshold

    Map phase:
    for every cell in U and V, emit (new value, old value) so each reducer receives 2 values per cell.

    Reduce phase:
        compare difference between two values, emits "true" if values are over threshold (0.3)
        "False" otherwise. This is done for every cell.


##9: Boolean Collapser Map-Reducer

    input: output of IterationController, for every U/V cell, a value of true or false
    output: a single boolean


    Map phase:
        send all boolean values to the reducer

    Reducer phase:
        OR all booleans to produce a single output


##10: MatrixMultiplier Map-Reducer

    input: UV_matrix
    output: Prediction Matrix (P) which is the multiplicaiton of U and V matrices


    Map phase:
        builds U and V matrices in memory from input
     once mapping is done (cleanup method):
        for every P cell, emit:
           the entire U row
           the entire V column

    Reduce Phase:

        for every cell in P:
            multiply the U row by the V column
            emit result as cell's value















 







